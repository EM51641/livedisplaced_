"""initial_schema

Revision ID: 2c4f017e061d
Revises: 
Create Date: 2024-12-23 17:06:05.293621

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "2c4f017e061d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:

    op.execute(
        """
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'credchoices') THEN
                CREATE TYPE credchoices AS ENUM ('RESET', 'ACTIVATION');
            END IF;
        EXCEPTION WHEN duplicate_object THEN
            NULL;
        END
        $$;
    """
    )

    op.execute(
        """
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'displacedcategory') THEN
                CREATE TYPE displacedcategory AS ENUM ('REFUGEES', 'ASYLIUM_SEEKERS', 'INTERNALLY_DISPLACED', 'PEOPLE_OF_CONCERNS');
            END IF;
        EXCEPTION WHEN duplicate_object THEN
            NULL;
        END
        $$;
    """
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "continent",
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        if_not_exists=True,
    )
    op.create_table(
        "termsofuse",
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("created"),
        if_not_exists=True,
    )
    op.create_table(
        "user",
        sa.Column("first_name", sa.String(length=50), nullable=False),
        sa.Column("last_name", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=True),
        sa.Column("password", sa.String(length=300), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        if_not_exists=True,
    )
    op.create_table(
        "oauth",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("provider_user_id", sa.String(), nullable=False),
        sa.Column("provider", sa.String(length=50), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
        if_not_exists=True,
    )
    op.create_table(
        "passcode",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "category",
            postgresql.ENUM(
                "RESET", "ACTIVATION", name="credchoices", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("expiration", sa.DateTime(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "category"),
        if_not_exists=True,
    )
    op.create_table(
        "region",
        sa.Column("name", sa.String(length=120), nullable=False),
        sa.Column("continent_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["continent_id"], ["continent.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        if_not_exists=True,
    )
    op.create_table(
        "user_termsofuse",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("termsofuse_id", sa.UUID(), nullable=False),
        sa.Column("signed", sa.DateTime(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["termsofuse_id"], ["termsofuse.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "termsofuse_id"),
        if_not_exists=True,
    )
    op.create_table(
        "country",
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("iso", sa.String(length=3), nullable=False),
        sa.Column("iso_2", sa.String(length=2), nullable=True),
        sa.Column("is_recognized", sa.Boolean(), nullable=False),
        sa.Column("region_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["region_id"], ["region.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("iso"),
        sa.UniqueConstraint("iso_2"),
        sa.UniqueConstraint("name"),
        if_not_exists=True,
    )
    op.create_table(
        "population",
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("year", sa.Integer(), nullable=False),
        sa.Column(
            "category",
            postgresql.ENUM(
                "REFUGEES",
                "ASYLIUM_SEEKERS",
                "INTERNALLY_DISPLACED",
                "PEOPLE_OF_CONCERNS",
                name="displacedcategory",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("country_id", sa.UUID(), nullable=False),
        sa.Column("country_arrival_id", sa.UUID(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_arrival_id"], ["country.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["country_id"], ["country.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("year", "country_id", "country_arrival_id", "category"),
        if_not_exists=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("population", if_exists=True)
    op.drop_table("country", if_exists=True)
    op.drop_table("user_termsofuse", if_exists=True)
    op.drop_table("region", if_exists=True)
    op.drop_table("passcode", if_exists=True)
    op.drop_table("oauth", if_exists=True)
    op.drop_table("user", if_exists=True)
    op.drop_table("termsofuse", if_exists=True)
    op.drop_table("continent", if_exists=True)

    op.execute("DROP TYPE IF EXISTS credchoices")
    op.execute("DROP TYPE IF EXISTS displacedcategory")
    # ### end Alembic commands ###
